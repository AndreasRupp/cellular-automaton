#include "mex.hpp"
#include "mexAdapter.hpp"

#include <iostream>

#include <CAM/cellular_automaton.hxx>

using namespace CAM;

/*!*************************************************************************************************
 * \brief   Domain size values.
 *
 * \tparam  nx       the size of a row for each dimension of the domain
 **************************************************************************************************/
static constexpr std::array<unsigned int, NX_MATLAB_SIZE> nx = {NX_MATLAB_VAL};
/*!*************************************************************************************************
 * \brief   Mex function for MATLAB.
 **************************************************************************************************/
class MexFunction : public matlab::mex::Function
{
 public:
  /*!***********************************************************************************************
   * \brief   Takes input arguments and prints possible outputs.
   *
   * \param   outputs     Output arguments.
   * \param   inputs      Input arguments.
   ************************************************************************************************/
  void operator()(matlab::mex::ArgumentList outputs, matlab::mex::ArgumentList inputs)
  {
    check_arguments(outputs, inputs);

    const unsigned int n_moves = inputs[0][0];
    const double porosity = inputs[1][0];
    const unsigned int jump_parameter_singles = inputs[2][0];
    const double jump_parameter_composites = inputs[3][0];
    const unsigned int output_rate = inputs[4][0];
    matlab::data::TypedArray<double> results = std::move(inputs[5]);
    matlab::data::TypedArray<double> measures = std::move(inputs[6]);
    const bool print_random_seed = inputs[7][0];

    cellular_automaton<nx> domain(porosity, jump_parameter_singles, jump_parameter_composites,
                                  inputs.size() == 9 ? (unsigned int)inputs[8][0] : 0U);

    if (print_random_seed)
      std::cout << "The random seed is " << domain.random_seed() << "." << std::endl;

    if (output_rate != 0)
    {
      if (results.getNumberOfElements() != 0)
      {
        const std::array<unsigned int, cellular_automaton<nx>::n_fields_>& domain_fields =
          domain.fields();
        for (unsigned int k = 0; k < cellular_automaton<nx>::n_fields_; ++k)
          results[k][0] = domain_fields[k];
      }
      if (measures.getNumberOfElements() != 0)
      {
        const auto meas = domain.eval_measures();
        for (unsigned int k = 0; k < meas.size(); ++k)
          measures[k][0] = meas[k];
      }
    }

    for (unsigned int i = 0; i < n_moves; ++i)
    {
      domain.move_particles();

      if (output_rate != 0 && (i + 1) % output_rate == 0)
      {
        if (results.getNumberOfElements() != 0)
        {
          const std::array<unsigned int, cellular_automaton<nx>::n_fields_>& domain_fields =
            domain.fields();
          for (unsigned int k = 0; k < cellular_automaton<nx>::n_fields_; ++k)
            results[k][(1 + i) / output_rate] = domain_fields[k];
        }
        if (measures.getNumberOfElements() != 0)
        {
          const auto meas = domain.eval_measures();
          for (unsigned int k = 0; k < meas.size(); ++k)
            measures[k][(1 + i) / output_rate] = meas[k];
        }
      }
    }

    outputs[0] = std::move(results);
    outputs[1] = std::move(measures);
  }
  /*!***********************************************************************************************
   * \brief   Checks arguments.
   *
   * \param   outputs     Output arguments.
   * \param   inputs      Input arguments.
   ************************************************************************************************/
  void check_arguments(matlab::mex::ArgumentList outputs, matlab::mex::ArgumentList inputs)
  {
    std::shared_ptr<matlab::engine::MATLABEngine> matlabPtr = getEngine();
    matlab::data::ArrayFactory factory;

    if (inputs.size() < 8 || inputs.size() > 9)
    {
      matlabPtr->feval(
        u"error", 0,
        std::vector<matlab::data::Array>({factory.createScalar("7 or 8 inputs required")}));
    }

    if (inputs[0].getNumberOfElements() != 1)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The number of steps must be a scalar")}));
    }

    if (inputs[0].getType() != matlab::data::ArrayType::INT32 || (int)inputs[0][0] < 0)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The number of steps must be a positive integer")}));
    }

    if (inputs[1].getNumberOfElements() != 1)
    {
      matlabPtr->feval(
        u"error", 0,
        std::vector<matlab::data::Array>({factory.createScalar("The porosity must be a scalar")}));
    }

    if (inputs[1].getType() != matlab::data::ArrayType::DOUBLE || (double)inputs[1][0] < 0 ||
        (double)inputs[1][0] > 1)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>({factory.createScalar(
                         "The porosity must be a double in range from 0 to 1")}));
    }

    if (inputs[2].getNumberOfElements() != 1)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The number of steps must be a scalar")}));
    }

    if (inputs[2].getType() != matlab::data::ArrayType::INT32 || (int)inputs[2][0] < 0)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The number of steps must be a positive integer")}));
    }

    if (inputs[3].getType() != matlab::data::ArrayType::DOUBLE)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The jump parameter must be a double")}));
    }

    if (inputs[3].getNumberOfElements() != 1)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The jump parameter must be a scalar")}));
    }

    if (inputs[4].getType() != matlab::data::ArrayType::INT32 || (int)inputs[4][0] < 0)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The output rate must be a positive integer")}));
    }

    if (inputs[4].getNumberOfElements() != 1)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The output rate must be a scalar")}));
    }

    if (inputs[5].getDimensions().size() != 2)
    {
      if (inputs[5].getDimensions()[0] != cellular_automaton<nx>::n_fields_ &&
          inputs[5].getDimensions()[1] != (int)inputs[0][0] + 1)
      {
        matlabPtr->feval(
          u"error", 0,
          std::vector<matlab::data::Array>({factory.createScalar(
            "The results matrix must be a m-by-n matrix, "
            "where m is the number of solid pixels and n is the number of outputs.")}));
      }
    }

    if (inputs[6].getDimensions().size() != 2)
    {
      if (inputs[6].getDimensions()[0] != 6 &&
          inputs[6].getDimensions()[1] != (int)inputs[0][0] + 1)
      {
        matlabPtr->feval(u"error", 0,
                         std::vector<matlab::data::Array>(
                           {factory.createScalar("The measures matrix must be a 6-by-n matrix, "
                                                 "where n is the number of outputs.")}));
      }
    }

    if (inputs[7].getNumberOfElements() != 1)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>({factory.createScalar(
                         "The indicator for the output of the random seed must be a scalar")}));
    }

    if (inputs[7].getType() != matlab::data::ArrayType::INT8 ||
        ((int)inputs[7][0] != 0 && (int)inputs[7][0] != 1))
    {
      matlabPtr->feval(
        u"error", 0,
        std::vector<matlab::data::Array>({factory.createScalar(
          "The indicator for the output of the random seed must be true (1) or false (0).")}));
    }

    if (inputs.size() > 8)
    {
      if (inputs[8].getNumberOfElements() != 1)
      {
        matlabPtr->feval(u"error", 0,
                         std::vector<matlab::data::Array>({factory.createScalar(
                           "The number of the random seed must be a scalar")}));
      }

      if (inputs[8].getType() != matlab::data::ArrayType::INT64 || (int)inputs[8][0] < 0)
      {
        matlabPtr->feval(u"error", 0,
                         std::vector<matlab::data::Array>({factory.createScalar(
                           "The number of the random seed must be a non-negative integer")}));
      }
    }
  }
};
