#include "mex.hpp"
#include "mexAdapter.hpp"

#include <iostream>

#include <CAM/cellular_automaton.hxx>

// TODO: Do everything that you did for the cellular_automaton.hxx file in this file, too.

static constexpr unsigned int nx = NX_MATLAB_VAL;
static constexpr unsigned int ny = NY_MATLAB_VAL;

template <unsigned int nx, unsigned int ny>
constexpr std::array<int, 4> cellular_automaton<nx, ny>::direct_neigh_;

template <unsigned int nx, unsigned int ny>
constexpr unsigned int cellular_automaton<nx, ny>::uint_max;

template <unsigned int nx, unsigned int ny>
constexpr double cellular_automaton<nx, ny>::double_min;

class MexFunction : public matlab::mex::Function
{
 public:
  void operator()(matlab::mex::ArgumentList outputs, matlab::mex::ArgumentList inputs)
  {
    check_arguments(outputs, inputs);

    const unsigned int n_moves = inputs[0][0];
    const double porosity = inputs[1][0];
    const double jump_param = inputs[2][0];
    const unsigned int output_rate = inputs[3][0];
    matlab::data::TypedArray<double> results = std::move(inputs[4]);
    matlab::data::TypedArray<double> measures = std::move(inputs[5]);
    const bool print_random_seed = inputs[6][0];

    cellular_automaton<nx, ny> domain(porosity, jump_param,
                                      inputs.size() == 8 ? (unsigned int)inputs[7][0] : 0U);

    if (print_random_seed)
      std::cout << "The random seed is " << domain.random_seed() << "." << std::endl;

    if (output_rate != 0)
    {
      if (results.getNumberOfElements() != 0)
      {
        const std::array<unsigned int, nx* ny>& domain_fields = domain.fields();
        for (unsigned int k = 0; k < nx * ny; ++k)
          results[k][0] = domain_fields[k];
      }
      if (measures.getNumberOfElements() != 0)
      {
        const std::array<double, 6> meas = domain.eval_measures();
        for (unsigned int k = 0; k < 6; ++k)
          measures[k][0] = meas[k];
      }
    }

    for (unsigned int i = 0; i < n_moves; ++i)
    {
      domain.move_particles();

      if (output_rate != 0 && (i + 1) % output_rate == 0)
      {
        if (results.getNumberOfElements() != 0)
        {
          const std::array<unsigned int, nx* ny>& domain_fields = domain.fields();
          for (unsigned int k = 0; k < nx * ny; ++k)
            results[k][(1 + i) / output_rate] = domain_fields[k];
        }
        if (measures.getNumberOfElements() != 0)
        {
          const std::array<double, 6> meas = domain.eval_measures();
          for (unsigned int k = 0; k < 6; ++k)
            measures[k][(1 + i) / output_rate] = meas[k];
        }
      }
    }

    outputs[0] = std::move(results);
    outputs[1] = std::move(measures);
  }

  void check_arguments(matlab::mex::ArgumentList outputs, matlab::mex::ArgumentList inputs)
  {
    std::shared_ptr<matlab::engine::MATLABEngine> matlabPtr = getEngine();
    matlab::data::ArrayFactory factory;

    if (inputs.size() < 6 && inputs.size() > 9)
    {
      matlabPtr->feval(
        u"error", 0,
        std::vector<matlab::data::Array>({factory.createScalar("6 - 9 inputs required")}));
    }

    if (inputs[0].getNumberOfElements() != 1) // Is this necessary?
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The first input argument must be a scalar")}));
    }

    if (inputs[0].getType() != matlab::data::ArrayType::INT32 ||
        (int)inputs[0][0] < 0)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>({factory.createScalar(
                         "The first input argument must be a positive integer")}));
    }

    if (inputs[1].getType() != matlab::data::ArrayType::DOUBLE || (double)inputs[1][0] < 0 ||
        (double)inputs[1][0] > 1)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The second argument must be a double in range from 0 to 1")}));
    }

    if (inputs[2].getType() != matlab::data::ArrayType::DOUBLE || (double)inputs[2][0] < 0)
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The third argument must be a positive double")}));
    }

    if (inputs[3].getType() != matlab::data::ArrayType::INT32 ||
        (int)inputs[3][0] < 0 )
    {
      matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>({factory.createScalar(
                         "The fourth input argument must be a positive integer")}));
    }

    if (inputs[4].getDimensions().size() != 2)
    {
      if (inputs[4].getDimensions()[0] != nx * ny &&
          inputs[4].getDimensions()[1] != (int)inputs[0][0] + 1)
      {
        matlabPtr->feval(u"error", 0,
                        std::vector<matlab::data::Array>(
                          {factory.createScalar("The fifth input argument must be a m-by-n matrix. "
                                                "Where m is domain size and n is steps + 1")}));
      }
    }

    if (inputs[5].getDimensions().size() != 2)
    {
      if (inputs[5].getDimensions()[0] != nx * ny &&
          inputs[5].getDimensions()[1] != (int)inputs[0][0] + 1)
      {
        matlabPtr->feval(u"error", 0,
                        std::vector<matlab::data::Array>(
                          {factory.createScalar("The sixth input argument must be a m-by-n matrix. "
                                                "Where m is domain size and n is steps + 1")}));
      }
    }

    // TODO: Check dimensions of [4] and [5]

    // TODO: Check that [6] is bool

    if (inputs.size() > 6)
    {
      if (inputs[6].getType() != matlab::data::ArrayType::INT8)
      {
        matlabPtr->feval(u"error", 0,
                       std::vector<matlab::data::Array>(
                         {factory.createScalar("The seventh input argument must be 1 (true) or 0 (false)")}));
      }

      if (inputs.size() == 7)
      {
        if (inputs[7].getType() != matlab::data::ArrayType::INT64)
        {
          matlabPtr->feval(u"error", 0,
                          std::vector<matlab::data::Array>({factory.createScalar(
                            "The eigth input argument must be a positive integer")}));
        }
      }
    }
  }
};
